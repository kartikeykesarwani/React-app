{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","Cardlist","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","robot","toLowerCase","includes","length","class","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAiBeA,EAfF,SAACC,GACb,IAAWC,EAAiBD,EAAjBC,KAAKC,EAAYF,EAAZE,MAAMC,EAAMH,EAANG,GACtB,OACO,yBAAKC,UAAU,uDACZ,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,KAC/C,6BACC,4BAAMA,GACN,4BAAMF,GACN,+BAAMC,MCUHK,EAjBI,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACb,OACA,6BAEKA,EAAOC,KAAI,SAACC,EAAKC,GACjB,OAAQ,kBAAC,EAAD,CAAMC,IAAKD,EACNR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCI5BW,EAbE,SAAC,GAA+B,EAA9BC,YAA+B,IAAnBC,EAAkB,EAAlBA,aAC9B,OACO,yBAAKX,UAAU,OACf,2BACAA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCAHI,G,MAPD,SAACnB,GACd,OACM,yBAAKoB,MAAO,CAACC,UAAU,SAAUC,OAAQ,kBAAmBC,OAAO,UAC/DvB,EAAMwB,YC6CFC,E,kDA1Cd,aAAe,IAAD,8BACb,gBAeDC,eAAgB,SAACC,GAChB,EAAKC,SAAS,CAAEd,YAAaa,EAAME,OAAOC,SAf1C,EAAKC,MAAQ,CACZvB,OAAS,GACHM,YAAc,IAJR,E,gEAOM,IAAD,OAClBkB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAACpB,OAAS4B,S,+BAUhC,IAAD,OACDC,EAAiBC,KAAKP,MAAMvB,OAAO+B,QAAO,SAAAC,GAC1C,OAAOA,EAAMvC,KAAKwC,cAAcC,SAAS,EAAKX,MAAMjB,YAAY2B,kBAElE,OAAgC,IAA7BH,KAAKP,MAAMvB,OAAOmC,OACb,uCAGJ,yBAAKvC,UAAU,MACf,yBAAKwC,MAAM,MACV,wBAAIA,MAAM,MAAV,iBAEA,kBAAC,EAAD,CAAW7B,aAAcuB,KAAKZ,iBAC9B,kBAAC,EAAD,KACM,kBAAC,EAAD,CAAUlB,OAAQ6B,U,GAnChBQ,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD2H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f97417ab.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) =>\n{   const { name,email,id }= props;\n\treturn (\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc'>\n           <img alt='robots' src={`https://robohash.org/${id}`} />\n           <div>\n            <h1>{ id }</h1>\n            <h2>{ name }</h2>\n            <p> { email}</p>\n           </div>\n        </div> \n    );\n}\n\n\nexport default Card;  ","import React from 'react';\nimport Card from './Card';\n\n    const Cardlist=({robots}) => {\n        return(\n        <div>\n         {\n             robots.map((user,i) => {\n           \t return (<Card key={i}\n           \t              id={robots[i].id}\n           \t              name={robots[i].name}\n           \t              email={robots[i].email} \n           \t         />\n           \t         );\n           })\n         }\n         </div> \n       ); \n    }\n\nexport default Cardlist;","import React from 'react';\n\nconst SearchBox =({searchfield,searchChange}) => {\n\treturn (\n        <div className=\"pa2\">\n        <input \n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\" \n        placeholder=\"search robots\"\n        onChange={searchChange}\n        />\n        </div>\n\n\t\t);\n}\nexport default SearchBox;","import React from 'react';\n\nconst Scroll =(props) =>{\n\treturn (\n       <div style={{overflowY:'scroll', border: '5px solid black', height:'650px'}}>\n         { props.children }\n       </div>\n\t\t)\n}\nexport default Scroll;","import React,{Component}from 'react';\nimport Cardlist from '../components/Cardlist';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport Scroll from '../components/Scroll';\n\n\nclass App extends Component {\n constructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\trobots : [],\n\t        searchfield : ''\n\t\t    }\n\t\t}\n componentDidMount(){\n \tfetch('https://jsonplaceholder.typicode.com/users')\n \t.then(response => response.json())\n \t.then(users => this.setState({robots : users }))\n \t}\n \t\n \n\n\n onSearchChange =(event) => {\n  this.setState({ searchfield: event.target.value })\n  }\n\nrender(){\n\tconst filteredRobots = this.state.robots.filter(robot =>{\n  \t    return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n        })\n\t    if(this.state.robots.length === 0){\n\t    \treturn <h1>Loading</h1>\n\t    }else {\n\t    \treturn(\n\t\t       <div className=\"tc\">\n\t\t       <div class=\"kk\">\n\t\t        <h1 class=\"gg\">Robofriends </h1>\n\t\t       </div>\n\t\t        <SearchBox searchChange={this.onSearchChange} />\n\t\t        <Scroll>\n                <Cardlist robots={filteredRobots}/>\n                </Scroll>\n               </div>\n\t\t    );\n\t    }\n\t    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App/>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}